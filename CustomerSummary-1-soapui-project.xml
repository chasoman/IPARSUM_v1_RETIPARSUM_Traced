<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="7b7eb8b1-7dea-487e-bb81-752d5269b80d" activeEnvironment="Default" name="GetCustomerAccountSummaryRESTProject" resourceRoot="" soapui-version="5.7.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="d2170138-d23b-4d45-99e2-e9e8207d1709" wadlVersion="http://wadl.dev.java.net/2009/02" name="CustomerSummary" type="rest" basePath="/customersummary/v1" definitionUrl="file:/C:/Users/chait.LAPTOP-U3EDSTAU/Documents/CustomerSummary_1.wadl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://LAPTOP-U3EDSTAU:8080/</con:endpoint></con:endpoints><con:resource name="/{customerId}" path="{customerId}" id="3e0033d4-23aa-48a3-b72f-f6e988d68ca7"><con:settings/><con:parameters><con:parameter required="true"><con:name>customerId</con:name><con:value/><con:style>TEMPLATE</con:style><con:default/></con:parameter></con:parameters><con:method name="getCustomerSummaryById" id="c1ab27e5-1258-45b5-bdd3-d049df4894b8" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE" id=""><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:representation type="FAULT" id=""><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xsi:nil="true"/><con:description xsi:nil="true"/></con:representation><con:request name="Request 1" id="8fb461dc-8b18-432b-b2e4-4adedd76ed36" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:30080</con:endpoint><con:request/><con:originalUri>http://localhost/customersummary/v1/1234567890</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="customerId" value="1234567892" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="910ae810-afed-4712-b2fa-e28f00c09039" wadlVersion="http://wadl.dev.java.net/2009/02" name="GetAccountTransactions" type="rest" basePath="/accounttransactions/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>GetAccountTransactions</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://LAPTOP-U3EDSTAU:8080/</con:endpoint></con:endpoints><con:resource name="/{accountId}" path="/{accountId}" id="537823b9-26fb-4d8b-b6dc-d53063036165"><con:settings/><con:parameters><con:parameter required="true"><con:name>accountId</con:name><con:style>TEMPLATE</con:style><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getAccountTransactionsById" id="c6bb0d5b-8d8f-4415-9c8c-c43232f77799" method="GET"><con:description>Retrieve transactions for given accountId&#13;
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/xml</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="Request 1" id="e3ee3f74-020d-44a6-a4e4-e77e56da4cc8" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:30081</con:endpoint><con:request/><con:originalUri>http://localhost/accounttransactions/v1/55945</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="accountId" value="01945" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:interface xsi:type="con:RestService" id="df768d3a-2826-4b9e-a6d3-031bb9a15c34" wadlVersion="http://wadl.dev.java.net/2009/02" name="accountSummary" type="rest" basePath="/accountsummary/v1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>accountSummary</con:description><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://LAPTOP-U3EDSTAU:8080/</con:endpoint></con:endpoints><con:resource name="/{accountId}" path="/{accountId}" id="74b3e743-8bb6-47f0-a47e-a0382ed239bd"><con:settings/><con:parameters><con:parameter required="true"><con:name>accountId</con:name><con:style>TEMPLATE</con:style><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getAccountSummaryById" id="31d6b83e-7351-4310-bce4-3993e256496f" method="GET"><con:description>Retrieve account summary for the given accountId&#13;
</con:description><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>500</con:status><con:params/><con:element xmlns:ns="http://localhost/accountsummary/v1/22953">ns:Fault</con:element></con:representation><con:request name="Request 1" id="724bea50-d421-4c89-ae23-bbc2c97ddad1" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:30082</con:endpoint><con:request/><con:originalUri>http://localhost/accountsummary/v1/22953</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="accountId" value="22944" xmlns="http://eviware.com/soapui/config"/></con:parameters></con:request></con:method></con:resource></con:interface><con:restMockService id="002fc442-6619-4820-9787-0b950930f429" port="8080" path="/" host="LAPTOP-U3EDSTAU"><con:settings/><con:properties/></con:restMockService><con:restMockService id="f23f8c2c-0659-410b-a63b-1b19cdfc0d61" port="30080" path="/" host="LAPTOP-U3EDSTAU" name="MockGetCustomerSummaryById" docroot=""><con:settings/><con:properties/><con:restMockAction name="/customersummary/v1/" method="GET" resourcePath="/customersummary/v1/" id="dd08b384-dec1-4d7e-b981-9edb06f89caa"><con:settings/><con:defaultResponse>Success_CustId_1234567892</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
def requestPath = mockRequest.getPath();
log.info "Path => "+requestPath;
def customerId = requestPath.substring(requestPath.lastIndexOf("/") + 1);
log.info "Customer Id => "+customerId;
switch(customerId){
	case "1234567890":
		return "Success_CustId_1234567890";
		break;
	case "1234567891":
		return "Success_CustId_1234567891";
		break;
	case "1234567892":
		return "Success_CustId_1234567892";
		break;
	default:
		return "Success_CustId_1234567892";
}</con:dispatchPath><con:response name="Success_CustId_1234567890" id="c8b4b744-7878-4e17-9e84-19740ded56d2" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getCustomerSummaryResponse": {
    "status": "SUCCESS",
    "customerSummary": {
      "customerId": "1234567890",
      "prefixTitle": "Mr.",
      "firstName": "Jason",
      "middleName": "Zacharia",
      "lastName": "Bourne",
      "suffixTitle": "jr.",
      "gender": "male",
      "birthDate": "19680101",
      "permanentAddress": {
        "addressLine1": "509 Park Avenue",
        "city": "New York",
        "postCode": "10010",
        "countryCode": "US"
      },
      "phoneNumber": "5554447786",
      "emailAddress": "jason.bourne@syndicate.gov.us",
      "accountIds": [
        "55943",
        "55944",
        "55945"
      ]
    }
  }
}</con:responseContent></con:response><con:response name="Success_CustId_1234567891" id="064220ef-56ba-4ca1-b3ad-f856fad8a9b0" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getCustomerSummaryResponse": {
    "status": "SUCCESS",
    "customerSummary": {
      "customerId":"1234567891",
      "prefixTitle": "Mr.",
      "firstName": "Jules",
      "middleName": "Gabriel",
      "lastName": "Verne",
      "suffixTitle": "sr.",
      "gender": "male",
      "birthDate": "18280208",
      "deathDate":"19050324",
      "permanentAddress": {
        "addressLine1": "No. 4 Rue Olivier-de-Clisson",
        "city": "Nantes",
        "postCode": "10010",
        "countryCode": "FR"
      },
      "phoneNumber": "5556667786",
      "emailAddress": "jules.verne@incrediblevoyages.fr",
      "accountIds": [
        "22943",
        "22944",
        "22945"
      ]
    }
  }
}</con:responseContent></con:response><con:response name="Success_CustId_1234567892" id="bd023a0d-ba4e-4128-878f-a29b4ff00088" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getCustomerSummaryResponse": {
    "status": "SUCCESS",
    "customerSummary": {
      "customerId":"1234567892",
      "prefixTitle": "Mrs.",
      "firstName": "Julia",
      "middleName": "Fiona",
      "lastName": "Roberts",
      "suffixTitle": "sr.",
      "gender": "female",
      "birthDate": "19671028",
      "permanentAddress": {
        "addressLine1": "1243 Harton Court",
        "city": "Smyrna",
        "postCode": "30080",
        "countryCode": "US"
      },
      "phoneNumber": "5553337786",
      "emailAddress": "julia.roberts@warnerbros.com",
      "accountIds": [
        "01943",
        "01944",
        "01945"
      ]
    }
  }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="eadc7d51-1785-4efd-bac4-480fef43c00b" port="30081" path="/" host="LAPTOP-U3EDSTAU" name="MockGetAccountTransactionsById" docroot=""><con:settings/><con:properties/><con:restMockAction name="/accounttransactions/v1/" method="GET" resourcePath="/accounttransactions/v1/" id="eed965fd-9e76-42d1-9e66-40fc2cf28c80"><con:settings/><con:defaultResponse>Success_AccountTransactions_AccountId_55945</con:defaultResponse><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
def requestPath = mockRequest.getPath();
//log.info "Path => "+requestPath;
def accountId = requestPath.substring(requestPath.lastIndexOf("/") + 1);
//log.info "Account Id => "+accountId;
switch(accountId){
	case "55943":
		return "Success_AccountTransactions_AccountId_55943";
		break;
	case "55944":
		//The script will sleep for 5 seconds to induce a timeout at the caller
		sleep(5000);
		break;
	case "55945":
		return "Success_AccountTransactions_AccountId_55945";
		break;
	case "22943":
		return "Success_AccountTransactions_AccountId_22943";
		break;
	case "22944":
		return "Success_AccountTransactions_AccountId_22944";
		break;
	case "22945":
		return "Success_AccountTransactions_AccountId_22945";
		break;
	case "01943":
		return "Success_AccountTransactions_AccountId_01943";
		break;
	case "01944":
		return "Success_AccountTransactions_AccountId_01944";
		break;
	case "01945":
		return "Success_AccountTransactions_AccountId_01945";
		break;
	default:
		return "Success_AccountTransactions_AccountId_55945";
}</con:dispatchPath><con:response name="Success_AccountTransactions_AccountId_55943" id="c860383f-654f-4f26-8427-343cc0e2c3d5" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "55943",
          "transactionId": "22000102365870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "55943",
          "transactionId": "22000102365871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Timeout_AccountTransactions_AccountId_55944" id="ea8f68e8-e857-4c1e-ba0f-c1a1a40542e8" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "55944",
          "transactionId": "22000102375870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "55944",
          "transactionId": "22000102375871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_55945" id="65f02f7e-6895-4171-b127-795ff0958c83" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "55945",
          "transactionId": "22000102385870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "55945",
          "transactionId": "22000102385871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_22943" id="59cc1455-3467-460b-a148-1e255d6c2ec3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "22943",
          "transactionId": "22000102365870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "22943",
          "transactionId": "22000102365871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_22944" id="fe8a7343-efdc-4801-b345-1f82182e600e" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "22944",
          "transactionId": "22000102375870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "22944",
          "transactionId": "22000102375871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_22945" id="a698af2e-7f89-42d5-804a-1e2af2210663" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "22945",
          "transactionId": "22000102385870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "22945",
          "transactionId": "22000102385871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_01944" id="3c8acf85-46d0-4391-a01c-f9f1c769a0a2" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "01944",
          "transactionId": "22000102375870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "01944",
          "transactionId": "22000102375871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_01945" id="7b641474-7fa6-4a73-94a1-b1f04cece6bf" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "01945",
          "transactionId": "22000102385870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "01945",
          "transactionId": "22000102385871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountTransactions_AccountId_01943" id="78a8061d-517b-4077-95c5-3e08e40c6b95" httpResponseStatus="200"><con:settings/><con:responseContent>{
  "getAccountTransactionsResponse": {
    "status": "SUCCESS",
    "accountTransactions": [
      {  
          "accountId": "01943",
          "transactionId": "22000102365870",
          "transactionDate": "20200101",
          "amount": "100.00",
          "transactionType": "POS",
          "debitOrCredit": "Debit"
      },{
          "accountId": "01943",
          "transactionId": "22000102365871",
          "transactionDate": "20210301",
          "amount": "678.00",
          "transactionType": "INTERNET",
          "debitOrCredit": "Debit"       
      }
    ]
  }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:restMockService id="c18d713a-1f44-4b02-bfdb-29c261b34268" port="30082" path="/" host="LAPTOP-U3EDSTAU" name="MockGetAccountSummaryById" docroot=""><con:settings/><con:properties/><con:restMockAction name="/accountsummary/v1/" method="GET" resourcePath="/accountsummary/v1/" id="676b5e58-d00d-409e-940e-93b04cd2f940"><con:settings/><con:defaultResponse xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/><con:dispatchStyle>SCRIPT</con:dispatchStyle><con:dispatchPath>/*&#13;
// Script dispatcher is used to select a response based on the incoming request.&#13;
// Here are few examples showing how to match based on path, query param, header and body&#13;
&#13;
// Match based on path&#13;
def requestPath = mockRequest.getPath()&#13;
log.info "Path: "+ requestPath&#13;
&#13;
if( requestPath.contains("json") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "JSON Response"&#13;
}&#13;
&#13;
&#13;
// Match based on query parameter&#13;
def queryString = mockRequest.getRequest().getQueryString()&#13;
log.info "QueryString: " + queryString&#13;
&#13;
if( queryString.contains("stockholm") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response Stockholm"&#13;
}&#13;
else if( queryString.contains("london") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response London"&#13;
}&#13;
&#13;
&#13;
// Match based on header&#13;
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")&#13;
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList&#13;
&#13;
if( acceptEncodingHeaderList.contains("gzip,deflate") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "GZiped Response"&#13;
}&#13;
&#13;
&#13;
// Match based on body&#13;
def requestBody = mockRequest.getRequestContent()&#13;
log.info "Request body: " + requestBody&#13;
&#13;
if( requestBody.contains("some data") )&#13;
{&#13;
    // return the name of the response you want to dispatch&#13;
    return "Response N"&#13;
}&#13;
*/&#13;
def requestPath = mockRequest.getPath();
//log.info "Path => "+requestPath;
def accountId = requestPath.substring(requestPath.lastIndexOf("/") + 1);
//log.info "Account Id => "+accountId;
switch(accountId){
	case "55943":
		return "Success_AccountSummary_AccountId_55943";
		break;
	case "55944":
		return "Success_AccountSummary_AccountId_55944";
		break;
	case "55945":
		return "Success_AccountSummary_AccountId_55945";
		break;
	case "22943":
		return "Success_AccountSummary_AccountId_22943";
		break;
	case "22944":
		return "Error_HTTP500_AccountSummary_AccountId_22944";
		break;
	case "22945":
		return "Success_AccountSummary_AccountId_22945";
		break;
	case "01943":
		return "Success_AccountSummary_AccountId_01943";
		break;
	case "01944":
		return "Success_AccountSummary_AccountId_01944";
		break;
	case "01945":
		return "Success_AccountSummary_AccountId_01945";
		break;
	default:
		return "Success_AccountSummary_AccountId_55943";
}</con:dispatchPath><con:response name="Success_AccountSummary_AccountId_55943" id="a7ed9937-1f63-41b6-8938-d3eab899c63d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "55943",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_55944" id="61d5d386-358c-480d-a737-a71463aabc75" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "55944",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_55945" id="dbee1c12-98b8-4634-8119-78eaefd9d12e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "55945",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_22943" id="f300babb-4dc8-4d1c-8897-05ff8cdc897f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "22943",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Error_HTTP500_AccountSummary_AccountId_22944" id="37a3f6a9-9813-4036-ac3a-311e0e04dd48" httpResponseStatus="500" mediaType="application/json"><con:settings/><con:responseContent>{
  "faultResponse": {
    "fault": [
      {
        "faultCode": "EM.SM.ERR001",
        "faultMessage": "Internal Error Occurred"
      }
    ]
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_22945" id="a29166bd-27c0-42f0-b0af-ff554c51844d" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "22945",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_01943" id="79c4b328-05bf-4ba8-91ff-3436e6989217" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "01943",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_01944" id="42214ad9-2269-4dc7-9c2a-b36c27010602" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "01944",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response><con:response name="Success_AccountSummary_AccountId_01945" id="fc8d9c90-bb9e-4a24-aac2-88cf570bd167" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:responseContent>{
  "getAccountSummaryResponse": {
    "status": "SUCCESS",
    "accountSummary": {
      "accountId": "01945",
      "productId": "1234",
      "productType": "Line Of Credit",
      "productName": "VISA Credit Card",
      "openDate": "20220101"
    }
  }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/></con:soapui-project>